{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMhIZFcvH5yntNjwUZ7p4vD",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Bhupathiadithya/AIML-17-BATCH/blob/main/Project.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "G01PBDsf4k8y"
      },
      "outputs": [],
      "source": [
        "import numpy as np # linear algebra\n",
        "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
        "\n",
        "import os\n",
        "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
        "    for filename in filenames:\n",
        "        print(os.path.join(dirname, filename))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv(\"/content/WineQT.csv\")"
      ],
      "metadata": {
        "id": "c0y3vHGg5lwx"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "wCrch0ba54jc",
        "outputId": "9053a8b3-3bad-4a76-df0b-8a083d2e351f"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
              "0               7.4             0.700         0.00             1.9      0.076   \n",
              "1               7.8             0.880         0.00             2.6      0.098   \n",
              "2               7.8             0.760         0.04             2.3      0.092   \n",
              "3              11.2             0.280         0.56             1.9      0.075   \n",
              "4               7.4             0.700         0.00             1.9      0.076   \n",
              "...             ...               ...          ...             ...        ...   \n",
              "1138            6.3             0.510         0.13             2.3      0.076   \n",
              "1139            6.8             0.620         0.08             1.9      0.068   \n",
              "1140            6.2             0.600         0.08             2.0      0.090   \n",
              "1141            5.9             0.550         0.10             2.2      0.062   \n",
              "1142            5.9             0.645         0.12             2.0      0.075   \n",
              "\n",
              "      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
              "0                    11.0                  34.0  0.99780  3.51       0.56   \n",
              "1                    25.0                  67.0  0.99680  3.20       0.68   \n",
              "2                    15.0                  54.0  0.99700  3.26       0.65   \n",
              "3                    17.0                  60.0  0.99800  3.16       0.58   \n",
              "4                    11.0                  34.0  0.99780  3.51       0.56   \n",
              "...                   ...                   ...      ...   ...        ...   \n",
              "1138                 29.0                  40.0  0.99574  3.42       0.75   \n",
              "1139                 28.0                  38.0  0.99651  3.42       0.82   \n",
              "1140                 32.0                  44.0  0.99490  3.45       0.58   \n",
              "1141                 39.0                  51.0  0.99512  3.52       0.76   \n",
              "1142                 32.0                  44.0  0.99547  3.57       0.71   \n",
              "\n",
              "      alcohol  quality    Id  \n",
              "0         9.4        5     0  \n",
              "1         9.8        5     1  \n",
              "2         9.8        5     2  \n",
              "3         9.8        6     3  \n",
              "4         9.4        5     4  \n",
              "...       ...      ...   ...  \n",
              "1138     11.0        6  1592  \n",
              "1139      9.5        6  1593  \n",
              "1140     10.5        5  1594  \n",
              "1141     11.2        6  1595  \n",
              "1142     10.2        5  1597  \n",
              "\n",
              "[1143 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5f97b7a2-43f3-4a2d-b073-e20de6112f49\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "      <th>Id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.700</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.99780</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.880</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0.098</td>\n",
              "      <td>25.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0.99680</td>\n",
              "      <td>3.20</td>\n",
              "      <td>0.68</td>\n",
              "      <td>9.8</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.760</td>\n",
              "      <td>0.04</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.092</td>\n",
              "      <td>15.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0.99700</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.65</td>\n",
              "      <td>9.8</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>11.2</td>\n",
              "      <td>0.280</td>\n",
              "      <td>0.56</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.075</td>\n",
              "      <td>17.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>0.99800</td>\n",
              "      <td>3.16</td>\n",
              "      <td>0.58</td>\n",
              "      <td>9.8</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.700</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.99780</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1138</th>\n",
              "      <td>6.3</td>\n",
              "      <td>0.510</td>\n",
              "      <td>0.13</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.076</td>\n",
              "      <td>29.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>0.99574</td>\n",
              "      <td>3.42</td>\n",
              "      <td>0.75</td>\n",
              "      <td>11.0</td>\n",
              "      <td>6</td>\n",
              "      <td>1592</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139</th>\n",
              "      <td>6.8</td>\n",
              "      <td>0.620</td>\n",
              "      <td>0.08</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.068</td>\n",
              "      <td>28.0</td>\n",
              "      <td>38.0</td>\n",
              "      <td>0.99651</td>\n",
              "      <td>3.42</td>\n",
              "      <td>0.82</td>\n",
              "      <td>9.5</td>\n",
              "      <td>6</td>\n",
              "      <td>1593</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1140</th>\n",
              "      <td>6.2</td>\n",
              "      <td>0.600</td>\n",
              "      <td>0.08</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.090</td>\n",
              "      <td>32.0</td>\n",
              "      <td>44.0</td>\n",
              "      <td>0.99490</td>\n",
              "      <td>3.45</td>\n",
              "      <td>0.58</td>\n",
              "      <td>10.5</td>\n",
              "      <td>5</td>\n",
              "      <td>1594</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1141</th>\n",
              "      <td>5.9</td>\n",
              "      <td>0.550</td>\n",
              "      <td>0.10</td>\n",
              "      <td>2.2</td>\n",
              "      <td>0.062</td>\n",
              "      <td>39.0</td>\n",
              "      <td>51.0</td>\n",
              "      <td>0.99512</td>\n",
              "      <td>3.52</td>\n",
              "      <td>0.76</td>\n",
              "      <td>11.2</td>\n",
              "      <td>6</td>\n",
              "      <td>1595</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1142</th>\n",
              "      <td>5.9</td>\n",
              "      <td>0.645</td>\n",
              "      <td>0.12</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.075</td>\n",
              "      <td>32.0</td>\n",
              "      <td>44.0</td>\n",
              "      <td>0.99547</td>\n",
              "      <td>3.57</td>\n",
              "      <td>0.71</td>\n",
              "      <td>10.2</td>\n",
              "      <td>5</td>\n",
              "      <td>1597</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1143 rows × 13 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5f97b7a2-43f3-4a2d-b073-e20de6112f49')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5f97b7a2-43f3-4a2d-b073-e20de6112f49 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5f97b7a2-43f3-4a2d-b073-e20de6112f49');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1249f6f5-6d89-4191-afe9-163e05e0d008\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1249f6f5-6d89-4191-afe9-163e05e0d008')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1249f6f5-6d89-4191-afe9-163e05e0d008 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_f9db3a05-1bb5-489a-b6cf-3472d3a991ad\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f9db3a05-1bb5-489a-b6cf-3472d3a991ad button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1143,\n  \"fields\": [\n    {\n      \"column\": \"fixed acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.74759501716954,\n        \"min\": 4.6,\n        \"max\": 15.9,\n        \"num_unique_values\": 91,\n        \"samples\": [\n          9.7,\n          7.0,\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volatile acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1796331930225245,\n        \"min\": 0.12,\n        \"max\": 1.58,\n        \"num_unique_values\": 135,\n        \"samples\": [\n          0.715,\n          0.48,\n          0.92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"citric acid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19668585234821898,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          0.02,\n          0.19,\n          0.11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"residual sugar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3559174666826799,\n        \"min\": 0.9,\n        \"max\": 15.5,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          4.0,\n          1.9,\n          7.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chlorides\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04726733795238057,\n        \"min\": 0.012,\n        \"max\": 0.611,\n        \"num_unique_values\": 131,\n        \"samples\": [\n          0.061,\n          0.119,\n          0.066\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"free sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.250486123430822,\n        \"min\": 1.0,\n        \"max\": 68.0,\n        \"num_unique_values\": 53,\n        \"samples\": [\n          30.0,\n          46.0,\n          40.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32.78213030734311,\n        \"min\": 6.0,\n        \"max\": 289.0,\n        \"num_unique_values\": 138,\n        \"samples\": [\n          70.0,\n          91.0,\n          71.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"density\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0019250671302545696,\n        \"min\": 0.99007,\n        \"max\": 1.00369,\n        \"num_unique_values\": 388,\n        \"samples\": [\n          0.99434,\n          0.9927,\n          0.99528\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.15666405977275194,\n        \"min\": 2.74,\n        \"max\": 4.01,\n        \"num_unique_values\": 87,\n        \"samples\": [\n          2.92,\n          3.51,\n          3.44\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sulphates\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1703987144670741,\n        \"min\": 0.33,\n        \"max\": 2.0,\n        \"num_unique_values\": 89,\n        \"samples\": [\n          0.72,\n          1.61,\n          1.12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alcohol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0821956098764445,\n        \"min\": 8.4,\n        \"max\": 14.9,\n        \"num_unique_values\": 61,\n        \"samples\": [\n          9.4,\n          9.9,\n          12.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quality\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 3,\n        \"max\": 8,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          5,\n          6,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 463,\n        \"min\": 0,\n        \"max\": 1597,\n        \"num_unique_values\": 1143,\n        \"samples\": [\n          222,\n          1514,\n          417\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def cek_nilai_kosong(df):\n",
        "    ada_kosong = df.isnull().values.any()\n",
        "    if ada_kosong:\n",
        "        print(\"Ada nilai kosong dalam DataFrame.\")\n",
        "        jumlah_kosong_per_kolom = df.isnull().sum()\n",
        "        print(\"Jumlah nilai kosong per kolom:\")\n",
        "        print(jumlah_kosong_per_kolom)\n",
        "        baris_dengan_kosong = df[df.isnull().any(axis=1)]\n",
        "        print(\"Baris dengan nilai kosong:\")\n",
        "        print(baris_dengan_kosong.index.tolist()) # Menggunakan .index.tolist() untuk menampilkan indeks baris\n",
        "    else:\n",
        "        print(\"Tidak ada nilai kosong dalam DataFrame.\")"
      ],
      "metadata": {
        "id": "OM-HIr-d58-q"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cek_nilai_kosong(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k3aa4Oc-6BZU",
        "outputId": "154a8329-8780-42c2-bb00-953a3dd57b3b"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tidak ada nilai kosong dalam DataFrame.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Membagi fitur dan target\n",
        "X = df.drop(columns=['quality', 'Id'])  # fitur\n",
        "y = df['quality']  # target"
      ],
      "metadata": {
        "id": "0gdxsRoX6HiF"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "UoRbJcbd6N6a",
        "outputId": "ba793b55-7bbe-4252-9e7e-cd09474c253c"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
              "0               7.4             0.700         0.00             1.9      0.076   \n",
              "1               7.8             0.880         0.00             2.6      0.098   \n",
              "2               7.8             0.760         0.04             2.3      0.092   \n",
              "3              11.2             0.280         0.56             1.9      0.075   \n",
              "4               7.4             0.700         0.00             1.9      0.076   \n",
              "...             ...               ...          ...             ...        ...   \n",
              "1138            6.3             0.510         0.13             2.3      0.076   \n",
              "1139            6.8             0.620         0.08             1.9      0.068   \n",
              "1140            6.2             0.600         0.08             2.0      0.090   \n",
              "1141            5.9             0.550         0.10             2.2      0.062   \n",
              "1142            5.9             0.645         0.12             2.0      0.075   \n",
              "\n",
              "      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
              "0                    11.0                  34.0  0.99780  3.51       0.56   \n",
              "1                    25.0                  67.0  0.99680  3.20       0.68   \n",
              "2                    15.0                  54.0  0.99700  3.26       0.65   \n",
              "3                    17.0                  60.0  0.99800  3.16       0.58   \n",
              "4                    11.0                  34.0  0.99780  3.51       0.56   \n",
              "...                   ...                   ...      ...   ...        ...   \n",
              "1138                 29.0                  40.0  0.99574  3.42       0.75   \n",
              "1139                 28.0                  38.0  0.99651  3.42       0.82   \n",
              "1140                 32.0                  44.0  0.99490  3.45       0.58   \n",
              "1141                 39.0                  51.0  0.99512  3.52       0.76   \n",
              "1142                 32.0                  44.0  0.99547  3.57       0.71   \n",
              "\n",
              "      alcohol  \n",
              "0         9.4  \n",
              "1         9.8  \n",
              "2         9.8  \n",
              "3         9.8  \n",
              "4         9.4  \n",
              "...       ...  \n",
              "1138     11.0  \n",
              "1139      9.5  \n",
              "1140     10.5  \n",
              "1141     11.2  \n",
              "1142     10.2  \n",
              "\n",
              "[1143 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a75839be-d773-476a-9a3a-20526855b2f3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.700</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.99780</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.880</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0.098</td>\n",
              "      <td>25.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0.99680</td>\n",
              "      <td>3.20</td>\n",
              "      <td>0.68</td>\n",
              "      <td>9.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.760</td>\n",
              "      <td>0.04</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.092</td>\n",
              "      <td>15.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0.99700</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.65</td>\n",
              "      <td>9.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>11.2</td>\n",
              "      <td>0.280</td>\n",
              "      <td>0.56</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.075</td>\n",
              "      <td>17.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>0.99800</td>\n",
              "      <td>3.16</td>\n",
              "      <td>0.58</td>\n",
              "      <td>9.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.700</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.99780</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1138</th>\n",
              "      <td>6.3</td>\n",
              "      <td>0.510</td>\n",
              "      <td>0.13</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.076</td>\n",
              "      <td>29.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>0.99574</td>\n",
              "      <td>3.42</td>\n",
              "      <td>0.75</td>\n",
              "      <td>11.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139</th>\n",
              "      <td>6.8</td>\n",
              "      <td>0.620</td>\n",
              "      <td>0.08</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.068</td>\n",
              "      <td>28.0</td>\n",
              "      <td>38.0</td>\n",
              "      <td>0.99651</td>\n",
              "      <td>3.42</td>\n",
              "      <td>0.82</td>\n",
              "      <td>9.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1140</th>\n",
              "      <td>6.2</td>\n",
              "      <td>0.600</td>\n",
              "      <td>0.08</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.090</td>\n",
              "      <td>32.0</td>\n",
              "      <td>44.0</td>\n",
              "      <td>0.99490</td>\n",
              "      <td>3.45</td>\n",
              "      <td>0.58</td>\n",
              "      <td>10.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1141</th>\n",
              "      <td>5.9</td>\n",
              "      <td>0.550</td>\n",
              "      <td>0.10</td>\n",
              "      <td>2.2</td>\n",
              "      <td>0.062</td>\n",
              "      <td>39.0</td>\n",
              "      <td>51.0</td>\n",
              "      <td>0.99512</td>\n",
              "      <td>3.52</td>\n",
              "      <td>0.76</td>\n",
              "      <td>11.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1142</th>\n",
              "      <td>5.9</td>\n",
              "      <td>0.645</td>\n",
              "      <td>0.12</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.075</td>\n",
              "      <td>32.0</td>\n",
              "      <td>44.0</td>\n",
              "      <td>0.99547</td>\n",
              "      <td>3.57</td>\n",
              "      <td>0.71</td>\n",
              "      <td>10.2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1143 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a75839be-d773-476a-9a3a-20526855b2f3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a75839be-d773-476a-9a3a-20526855b2f3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a75839be-d773-476a-9a3a-20526855b2f3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f878180e-6008-4165-bee9-3fbb53230555\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f878180e-6008-4165-bee9-3fbb53230555')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f878180e-6008-4165-bee9-3fbb53230555 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_9643f197-0dfa-4a39-b9f6-3739f52011dc\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_9643f197-0dfa-4a39-b9f6-3739f52011dc button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('X');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X",
              "summary": "{\n  \"name\": \"X\",\n  \"rows\": 1143,\n  \"fields\": [\n    {\n      \"column\": \"fixed acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.74759501716954,\n        \"min\": 4.6,\n        \"max\": 15.9,\n        \"num_unique_values\": 91,\n        \"samples\": [\n          9.7,\n          7.0,\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volatile acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1796331930225245,\n        \"min\": 0.12,\n        \"max\": 1.58,\n        \"num_unique_values\": 135,\n        \"samples\": [\n          0.715,\n          0.48,\n          0.92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"citric acid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19668585234821898,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          0.02,\n          0.19,\n          0.11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"residual sugar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3559174666826799,\n        \"min\": 0.9,\n        \"max\": 15.5,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          4.0,\n          1.9,\n          7.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chlorides\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04726733795238057,\n        \"min\": 0.012,\n        \"max\": 0.611,\n        \"num_unique_values\": 131,\n        \"samples\": [\n          0.061,\n          0.119,\n          0.066\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"free sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.250486123430822,\n        \"min\": 1.0,\n        \"max\": 68.0,\n        \"num_unique_values\": 53,\n        \"samples\": [\n          30.0,\n          46.0,\n          40.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32.78213030734311,\n        \"min\": 6.0,\n        \"max\": 289.0,\n        \"num_unique_values\": 138,\n        \"samples\": [\n          70.0,\n          91.0,\n          71.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"density\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0019250671302545696,\n        \"min\": 0.99007,\n        \"max\": 1.00369,\n        \"num_unique_values\": 388,\n        \"samples\": [\n          0.99434,\n          0.9927,\n          0.99528\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.15666405977275194,\n        \"min\": 2.74,\n        \"max\": 4.01,\n        \"num_unique_values\": 87,\n        \"samples\": [\n          2.92,\n          3.51,\n          3.44\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sulphates\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1703987144670741,\n        \"min\": 0.33,\n        \"max\": 2.0,\n        \"num_unique_values\": 89,\n        \"samples\": [\n          0.72,\n          1.61,\n          1.12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alcohol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0821956098764445,\n        \"min\": 8.4,\n        \"max\": 14.9,\n        \"num_unique_values\": 61,\n        \"samples\": [\n          9.4,\n          9.9,\n          12.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eZxc3xQm6U0z",
        "outputId": "63326ba0-e812-459c-fa8d-6bcb4c74b5c1"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       5\n",
              "1       5\n",
              "2       5\n",
              "3       6\n",
              "4       5\n",
              "       ..\n",
              "1138    6\n",
              "1139    6\n",
              "1140    5\n",
              "1141    6\n",
              "1142    5\n",
              "Name: quality, Length: 1143, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
        "\n",
        "# Ubah variabel kategorikal menjadi bentuk numerik\n",
        "le = LabelEncoder()\n",
        "y = le.fit_transform(y)"
      ],
      "metadata": {
        "id": "vJTMkMjm6dj8"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k9j1wIr56h51",
        "outputId": "02812a78-6851-4ff0-9004-04991bc3c3ba"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1143,)"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CIYQ06426kHN",
        "outputId": "d2c19b9e-50aa-4c8f-b34a-fac5faf9474a"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2, 2, 2, ..., 2, 3, 2])"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Normalisasi fitur-fitur\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)"
      ],
      "metadata": {
        "id": "6fcsfvkr6ngv"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_scaled.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ec5za4Jz6qrZ",
        "outputId": "e292e704-46d7-4a8f-ace8-bb04aeafc638"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1143, 11)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_scaled"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mFgEIGWP6vQb",
        "outputId": "a40e27a0-5fc2-4f5b-8969-413f98e1fd5f"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-0.52157961,  0.93933222, -1.36502663, ...,  1.27069495,\n",
              "        -0.57365783, -0.96338181],\n",
              "       [-0.29259344,  1.94181282, -1.36502663, ..., -0.70892755,\n",
              "         0.1308811 , -0.59360107],\n",
              "       [-0.29259344,  1.27349242, -1.16156762, ..., -0.32577481,\n",
              "        -0.04525363, -0.59360107],\n",
              "       ...,\n",
              "       [-1.20853813,  0.38239855, -0.9581086 , ...,  0.88754221,\n",
              "        -0.45623467,  0.05351522],\n",
              "       [-1.38027776,  0.10393172, -0.8563791 , ...,  1.33455374,\n",
              "         0.60057372,  0.70063152],\n",
              "       [-1.38027776,  0.6330187 , -0.75464959, ...,  1.65384769,\n",
              "         0.30701583, -0.22382033]])"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class_values = df['quality'].unique()\n",
        "print(\"Nilai kelas:\", class_values)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HoiJ4SES6xLO",
        "outputId": "60354060-c69e-4b29-b5fc-9a18ea6011d5"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Nilai kelas: [5 6 7 4 8 3]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "jumlah_kelas=len(class_values)\n",
        "print(\"jumlah kelas:\",jumlah_kelas)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f2gGSTsn7CPh",
        "outputId": "5667b176-6d7d-4075-9530-2f2d8a1076a2"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "jumlah kelas: 6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class_counts = df['quality'].value_counts()\n",
        "print(class_counts)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LnwxNmOK7Gu2",
        "outputId": "be8e4f99-a926-4530-c045-561d3e703024"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "quality\n",
            "5    483\n",
            "6    462\n",
            "7    143\n",
            "4     33\n",
            "8     16\n",
            "3      6\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from imblearn.over_sampling import SMOTE\n",
        "\n",
        "# Oversampling menggunakan SMOTE\n",
        "smote = SMOTE(sampling_strategy='auto')\n",
        "X_resampled, y_resampled = smote.fit_resample(X_scaled, y)"
      ],
      "metadata": {
        "id": "g894ht9Y7Jax"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.utils import to_categorical\n",
        "\n",
        "# Ubah target menjadi one-hot encoding\n",
        "y_resampled_encoded = to_categorical(y_resampled)"
      ],
      "metadata": {
        "id": "mTgKYEMv7NfJ"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Membagi data menjadi data pelatihan dan data pengujian\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled_encoded,\n",
        "                            test_size=0.2, random_state=42,stratify=y_resampled_encoded)"
      ],
      "metadata": {
        "id": "eq_5JQHg7Rua"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.models import Sequential\n",
        "from keras.layers import Dense\n",
        "\n",
        "# Membangun model MLP\n",
        "model = Sequential()\n",
        "model.add(Dense(64, input_dim=X_train.shape[1], activation='relu'))\n",
        "model.add(Dense(32, activation='relu'))\n",
        "model.add(Dense(10, activation='relu'))\n",
        "model.add(Dense(jumlah_kelas, activation='softmax'))  # jumlah neuron sesuai dengan jumlah kelas"
      ],
      "metadata": {
        "id": "gD8TPfjR7V17"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.optimizers import Adam\n",
        "\n",
        "# Compile model dengan penyesuaian learning rate\n",
        "#optimizer = Adam(learning_rate=0.001)\n",
        "optimizer = Adam(learning_rate=0.0001)\n",
        "model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "V-scHtff7ZOZ"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.callbacks import EarlyStopping\n",
        "\n",
        "# Early stopping untuk mencegah overfitting\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=15, restore_best_weights=True)"
      ],
      "metadata": {
        "id": "v15Pk47r7ex-"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Latih model\n",
        "history=model.fit(X_train, y_train, epochs=1000, batch_size=64,\n",
        "                  validation_data=(X_test, y_test),callbacks=[early_stopping])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LghRnFtS7iJt",
        "outputId": "7a9c8bda-8c6e-4bbb-b7fc-e61fa7723447"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/1000\n",
            "37/37 [==============================] - 4s 28ms/step - loss: 1.8096 - accuracy: 0.1760 - val_loss: 1.7802 - val_accuracy: 0.2103\n",
            "Epoch 2/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 1.7717 - accuracy: 0.2373 - val_loss: 1.7456 - val_accuracy: 0.3069\n",
            "Epoch 3/1000\n",
            "37/37 [==============================] - 0s 11ms/step - loss: 1.7393 - accuracy: 0.3374 - val_loss: 1.7132 - val_accuracy: 0.3897\n",
            "Epoch 4/1000\n",
            "37/37 [==============================] - 1s 16ms/step - loss: 1.7098 - accuracy: 0.3827 - val_loss: 1.6839 - val_accuracy: 0.4086\n",
            "Epoch 5/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 1.6824 - accuracy: 0.4124 - val_loss: 1.6555 - val_accuracy: 0.4328\n",
            "Epoch 6/1000\n",
            "37/37 [==============================] - 0s 10ms/step - loss: 1.6547 - accuracy: 0.4392 - val_loss: 1.6259 - val_accuracy: 0.4345\n",
            "Epoch 7/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 1.6268 - accuracy: 0.4547 - val_loss: 1.5958 - val_accuracy: 0.4466\n",
            "Epoch 8/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 1.5993 - accuracy: 0.4603 - val_loss: 1.5673 - val_accuracy: 0.4534\n",
            "Epoch 9/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 1.5722 - accuracy: 0.4694 - val_loss: 1.5385 - val_accuracy: 0.4672\n",
            "Epoch 10/1000\n",
            "37/37 [==============================] - 0s 9ms/step - loss: 1.5452 - accuracy: 0.4754 - val_loss: 1.5098 - val_accuracy: 0.4690\n",
            "Epoch 11/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 1.5187 - accuracy: 0.4814 - val_loss: 1.4831 - val_accuracy: 0.4724\n",
            "Epoch 12/1000\n",
            "37/37 [==============================] - 0s 9ms/step - loss: 1.4935 - accuracy: 0.4823 - val_loss: 1.4575 - val_accuracy: 0.4707\n",
            "Epoch 13/1000\n",
            "37/37 [==============================] - 0s 10ms/step - loss: 1.4697 - accuracy: 0.4814 - val_loss: 1.4333 - val_accuracy: 0.4793\n",
            "Epoch 14/1000\n",
            "37/37 [==============================] - 0s 11ms/step - loss: 1.4472 - accuracy: 0.4810 - val_loss: 1.4109 - val_accuracy: 0.4810\n",
            "Epoch 15/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 1.4258 - accuracy: 0.4879 - val_loss: 1.3897 - val_accuracy: 0.4879\n",
            "Epoch 16/1000\n",
            "37/37 [==============================] - 0s 10ms/step - loss: 1.4052 - accuracy: 0.4875 - val_loss: 1.3691 - val_accuracy: 0.4914\n",
            "Epoch 17/1000\n",
            "37/37 [==============================] - 0s 9ms/step - loss: 1.3854 - accuracy: 0.4884 - val_loss: 1.3489 - val_accuracy: 0.4931\n",
            "Epoch 18/1000\n",
            "37/37 [==============================] - 0s 11ms/step - loss: 1.3664 - accuracy: 0.4884 - val_loss: 1.3302 - val_accuracy: 0.4931\n",
            "Epoch 19/1000\n",
            "37/37 [==============================] - 0s 9ms/step - loss: 1.3480 - accuracy: 0.4862 - val_loss: 1.3114 - val_accuracy: 0.4983\n",
            "Epoch 20/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 1.3293 - accuracy: 0.4840 - val_loss: 1.2929 - val_accuracy: 0.5034\n",
            "Epoch 21/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 1.3110 - accuracy: 0.4892 - val_loss: 1.2751 - val_accuracy: 0.5103\n",
            "Epoch 22/1000\n",
            "37/37 [==============================] - 0s 10ms/step - loss: 1.2936 - accuracy: 0.4927 - val_loss: 1.2581 - val_accuracy: 0.5172\n",
            "Epoch 23/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 1.2767 - accuracy: 0.4957 - val_loss: 1.2421 - val_accuracy: 0.5241\n",
            "Epoch 24/1000\n",
            "37/37 [==============================] - 0s 9ms/step - loss: 1.2606 - accuracy: 0.5013 - val_loss: 1.2265 - val_accuracy: 0.5276\n",
            "Epoch 25/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 1.2443 - accuracy: 0.5099 - val_loss: 1.2105 - val_accuracy: 0.5328\n",
            "Epoch 26/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 1.2284 - accuracy: 0.5160 - val_loss: 1.1950 - val_accuracy: 0.5345\n",
            "Epoch 27/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 1.2133 - accuracy: 0.5194 - val_loss: 1.1803 - val_accuracy: 0.5431\n",
            "Epoch 28/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 1.1983 - accuracy: 0.5242 - val_loss: 1.1659 - val_accuracy: 0.5466\n",
            "Epoch 29/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 1.1841 - accuracy: 0.5280 - val_loss: 1.1520 - val_accuracy: 0.5517\n",
            "Epoch 30/1000\n",
            "37/37 [==============================] - 0s 9ms/step - loss: 1.1701 - accuracy: 0.5319 - val_loss: 1.1387 - val_accuracy: 0.5569\n",
            "Epoch 31/1000\n",
            "37/37 [==============================] - 0s 11ms/step - loss: 1.1561 - accuracy: 0.5380 - val_loss: 1.1255 - val_accuracy: 0.5517\n",
            "Epoch 32/1000\n",
            "37/37 [==============================] - 0s 9ms/step - loss: 1.1429 - accuracy: 0.5410 - val_loss: 1.1127 - val_accuracy: 0.5534\n",
            "Epoch 33/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 1.1292 - accuracy: 0.5470 - val_loss: 1.0998 - val_accuracy: 0.5569\n",
            "Epoch 34/1000\n",
            "37/37 [==============================] - 0s 9ms/step - loss: 1.1159 - accuracy: 0.5496 - val_loss: 1.0869 - val_accuracy: 0.5655\n",
            "Epoch 35/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 1.1029 - accuracy: 0.5544 - val_loss: 1.0753 - val_accuracy: 0.5776\n",
            "Epoch 36/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 1.0901 - accuracy: 0.5608 - val_loss: 1.0632 - val_accuracy: 0.5828\n",
            "Epoch 37/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 1.0777 - accuracy: 0.5664 - val_loss: 1.0520 - val_accuracy: 0.5862\n",
            "Epoch 38/1000\n",
            "37/37 [==============================] - 0s 10ms/step - loss: 1.0656 - accuracy: 0.5733 - val_loss: 1.0408 - val_accuracy: 0.5879\n",
            "Epoch 39/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 1.0540 - accuracy: 0.5725 - val_loss: 1.0298 - val_accuracy: 0.5897\n",
            "Epoch 40/1000\n",
            "37/37 [==============================] - 0s 9ms/step - loss: 1.0423 - accuracy: 0.5755 - val_loss: 1.0190 - val_accuracy: 0.5931\n",
            "Epoch 41/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 1.0315 - accuracy: 0.5794 - val_loss: 1.0086 - val_accuracy: 0.5966\n",
            "Epoch 42/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 1.0201 - accuracy: 0.5794 - val_loss: 0.9984 - val_accuracy: 0.5966\n",
            "Epoch 43/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 1.0098 - accuracy: 0.5837 - val_loss: 0.9883 - val_accuracy: 0.5983\n",
            "Epoch 44/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.9989 - accuracy: 0.5919 - val_loss: 0.9786 - val_accuracy: 0.6138\n",
            "Epoch 45/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.9883 - accuracy: 0.6035 - val_loss: 0.9693 - val_accuracy: 0.6086\n",
            "Epoch 46/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.9777 - accuracy: 0.6079 - val_loss: 0.9603 - val_accuracy: 0.6069\n",
            "Epoch 47/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.9678 - accuracy: 0.6100 - val_loss: 0.9511 - val_accuracy: 0.6138\n",
            "Epoch 48/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.9588 - accuracy: 0.6126 - val_loss: 0.9430 - val_accuracy: 0.6241\n",
            "Epoch 49/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.9492 - accuracy: 0.6169 - val_loss: 0.9348 - val_accuracy: 0.6276\n",
            "Epoch 50/1000\n",
            "37/37 [==============================] - 0s 9ms/step - loss: 0.9405 - accuracy: 0.6221 - val_loss: 0.9262 - val_accuracy: 0.6310\n",
            "Epoch 51/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.9315 - accuracy: 0.6273 - val_loss: 0.9189 - val_accuracy: 0.6345\n",
            "Epoch 52/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 0.9230 - accuracy: 0.6316 - val_loss: 0.9110 - val_accuracy: 0.6431\n",
            "Epoch 53/1000\n",
            "37/37 [==============================] - 0s 10ms/step - loss: 0.9148 - accuracy: 0.6402 - val_loss: 0.9039 - val_accuracy: 0.6448\n",
            "Epoch 54/1000\n",
            "37/37 [==============================] - 0s 10ms/step - loss: 0.9069 - accuracy: 0.6506 - val_loss: 0.8966 - val_accuracy: 0.6466\n",
            "Epoch 55/1000\n",
            "37/37 [==============================] - 1s 15ms/step - loss: 0.8986 - accuracy: 0.6523 - val_loss: 0.8888 - val_accuracy: 0.6552\n",
            "Epoch 56/1000\n",
            "37/37 [==============================] - 1s 15ms/step - loss: 0.8914 - accuracy: 0.6605 - val_loss: 0.8825 - val_accuracy: 0.6638\n",
            "Epoch 57/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.8838 - accuracy: 0.6682 - val_loss: 0.8762 - val_accuracy: 0.6724\n",
            "Epoch 58/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.8766 - accuracy: 0.6657 - val_loss: 0.8696 - val_accuracy: 0.6793\n",
            "Epoch 59/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.8702 - accuracy: 0.6739 - val_loss: 0.8631 - val_accuracy: 0.6793\n",
            "Epoch 60/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 0.8633 - accuracy: 0.6730 - val_loss: 0.8577 - val_accuracy: 0.6793\n",
            "Epoch 61/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.8568 - accuracy: 0.6816 - val_loss: 0.8514 - val_accuracy: 0.6793\n",
            "Epoch 62/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.8506 - accuracy: 0.6846 - val_loss: 0.8457 - val_accuracy: 0.6845\n",
            "Epoch 63/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.8450 - accuracy: 0.6898 - val_loss: 0.8405 - val_accuracy: 0.6862\n",
            "Epoch 64/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.8387 - accuracy: 0.6915 - val_loss: 0.8347 - val_accuracy: 0.6897\n",
            "Epoch 65/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.8329 - accuracy: 0.6976 - val_loss: 0.8298 - val_accuracy: 0.6931\n",
            "Epoch 66/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.8276 - accuracy: 0.7045 - val_loss: 0.8252 - val_accuracy: 0.6966\n",
            "Epoch 67/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.8224 - accuracy: 0.7028 - val_loss: 0.8192 - val_accuracy: 0.6948\n",
            "Epoch 68/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.8166 - accuracy: 0.7066 - val_loss: 0.8146 - val_accuracy: 0.6983\n",
            "Epoch 69/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.8113 - accuracy: 0.7114 - val_loss: 0.8101 - val_accuracy: 0.7069\n",
            "Epoch 70/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.8062 - accuracy: 0.7135 - val_loss: 0.8054 - val_accuracy: 0.7034\n",
            "Epoch 71/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.8014 - accuracy: 0.7157 - val_loss: 0.8020 - val_accuracy: 0.7052\n",
            "Epoch 72/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.7963 - accuracy: 0.7230 - val_loss: 0.7976 - val_accuracy: 0.7086\n",
            "Epoch 73/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.7918 - accuracy: 0.7230 - val_loss: 0.7925 - val_accuracy: 0.7138\n",
            "Epoch 74/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.7873 - accuracy: 0.7222 - val_loss: 0.7893 - val_accuracy: 0.7138\n",
            "Epoch 75/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.7828 - accuracy: 0.7282 - val_loss: 0.7855 - val_accuracy: 0.7138\n",
            "Epoch 76/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.7782 - accuracy: 0.7312 - val_loss: 0.7813 - val_accuracy: 0.7121\n",
            "Epoch 77/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.7738 - accuracy: 0.7330 - val_loss: 0.7778 - val_accuracy: 0.7121\n",
            "Epoch 78/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.7696 - accuracy: 0.7312 - val_loss: 0.7733 - val_accuracy: 0.7172\n",
            "Epoch 79/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.7654 - accuracy: 0.7325 - val_loss: 0.7713 - val_accuracy: 0.7224\n",
            "Epoch 80/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.7610 - accuracy: 0.7355 - val_loss: 0.7668 - val_accuracy: 0.7224\n",
            "Epoch 81/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.7569 - accuracy: 0.7355 - val_loss: 0.7634 - val_accuracy: 0.7224\n",
            "Epoch 82/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.7533 - accuracy: 0.7373 - val_loss: 0.7606 - val_accuracy: 0.7259\n",
            "Epoch 83/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.7492 - accuracy: 0.7403 - val_loss: 0.7583 - val_accuracy: 0.7259\n",
            "Epoch 84/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.7455 - accuracy: 0.7412 - val_loss: 0.7546 - val_accuracy: 0.7241\n",
            "Epoch 85/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.7417 - accuracy: 0.7446 - val_loss: 0.7510 - val_accuracy: 0.7241\n",
            "Epoch 86/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.7378 - accuracy: 0.7455 - val_loss: 0.7486 - val_accuracy: 0.7259\n",
            "Epoch 87/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.7342 - accuracy: 0.7442 - val_loss: 0.7453 - val_accuracy: 0.7259\n",
            "Epoch 88/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.7303 - accuracy: 0.7489 - val_loss: 0.7422 - val_accuracy: 0.7259\n",
            "Epoch 89/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.7270 - accuracy: 0.7489 - val_loss: 0.7392 - val_accuracy: 0.7293\n",
            "Epoch 90/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.7235 - accuracy: 0.7498 - val_loss: 0.7360 - val_accuracy: 0.7276\n",
            "Epoch 91/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.7204 - accuracy: 0.7515 - val_loss: 0.7335 - val_accuracy: 0.7293\n",
            "Epoch 92/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.7165 - accuracy: 0.7532 - val_loss: 0.7309 - val_accuracy: 0.7310\n",
            "Epoch 93/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.7132 - accuracy: 0.7541 - val_loss: 0.7282 - val_accuracy: 0.7293\n",
            "Epoch 94/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.7102 - accuracy: 0.7554 - val_loss: 0.7262 - val_accuracy: 0.7310\n",
            "Epoch 95/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.7072 - accuracy: 0.7563 - val_loss: 0.7247 - val_accuracy: 0.7328\n",
            "Epoch 96/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.7035 - accuracy: 0.7550 - val_loss: 0.7207 - val_accuracy: 0.7310\n",
            "Epoch 97/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.7007 - accuracy: 0.7575 - val_loss: 0.7178 - val_accuracy: 0.7328\n",
            "Epoch 98/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6973 - accuracy: 0.7593 - val_loss: 0.7153 - val_accuracy: 0.7379\n",
            "Epoch 99/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6942 - accuracy: 0.7580 - val_loss: 0.7132 - val_accuracy: 0.7310\n",
            "Epoch 100/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6910 - accuracy: 0.7580 - val_loss: 0.7105 - val_accuracy: 0.7310\n",
            "Epoch 101/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6883 - accuracy: 0.7588 - val_loss: 0.7079 - val_accuracy: 0.7397\n",
            "Epoch 102/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6851 - accuracy: 0.7593 - val_loss: 0.7068 - val_accuracy: 0.7397\n",
            "Epoch 103/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6822 - accuracy: 0.7601 - val_loss: 0.7037 - val_accuracy: 0.7397\n",
            "Epoch 104/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6795 - accuracy: 0.7649 - val_loss: 0.7017 - val_accuracy: 0.7362\n",
            "Epoch 105/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6768 - accuracy: 0.7614 - val_loss: 0.6990 - val_accuracy: 0.7397\n",
            "Epoch 106/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6736 - accuracy: 0.7636 - val_loss: 0.6974 - val_accuracy: 0.7397\n",
            "Epoch 107/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6709 - accuracy: 0.7649 - val_loss: 0.6953 - val_accuracy: 0.7414\n",
            "Epoch 108/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6683 - accuracy: 0.7636 - val_loss: 0.6933 - val_accuracy: 0.7466\n",
            "Epoch 109/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6660 - accuracy: 0.7653 - val_loss: 0.6906 - val_accuracy: 0.7431\n",
            "Epoch 110/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.6630 - accuracy: 0.7657 - val_loss: 0.6889 - val_accuracy: 0.7466\n",
            "Epoch 111/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6603 - accuracy: 0.7657 - val_loss: 0.6868 - val_accuracy: 0.7466\n",
            "Epoch 112/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.6576 - accuracy: 0.7636 - val_loss: 0.6849 - val_accuracy: 0.7448\n",
            "Epoch 113/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.6551 - accuracy: 0.7683 - val_loss: 0.6832 - val_accuracy: 0.7431\n",
            "Epoch 114/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.6526 - accuracy: 0.7657 - val_loss: 0.6809 - val_accuracy: 0.7414\n",
            "Epoch 115/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.6503 - accuracy: 0.7675 - val_loss: 0.6792 - val_accuracy: 0.7431\n",
            "Epoch 116/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6477 - accuracy: 0.7657 - val_loss: 0.6776 - val_accuracy: 0.7448\n",
            "Epoch 117/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6455 - accuracy: 0.7683 - val_loss: 0.6755 - val_accuracy: 0.7448\n",
            "Epoch 118/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6429 - accuracy: 0.7722 - val_loss: 0.6736 - val_accuracy: 0.7466\n",
            "Epoch 119/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6404 - accuracy: 0.7679 - val_loss: 0.6713 - val_accuracy: 0.7466\n",
            "Epoch 120/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6386 - accuracy: 0.7662 - val_loss: 0.6699 - val_accuracy: 0.7466\n",
            "Epoch 121/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6359 - accuracy: 0.7692 - val_loss: 0.6690 - val_accuracy: 0.7466\n",
            "Epoch 122/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6338 - accuracy: 0.7692 - val_loss: 0.6667 - val_accuracy: 0.7448\n",
            "Epoch 123/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6315 - accuracy: 0.7696 - val_loss: 0.6652 - val_accuracy: 0.7483\n",
            "Epoch 124/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6293 - accuracy: 0.7709 - val_loss: 0.6636 - val_accuracy: 0.7466\n",
            "Epoch 125/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.6271 - accuracy: 0.7705 - val_loss: 0.6617 - val_accuracy: 0.7483\n",
            "Epoch 126/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.6249 - accuracy: 0.7722 - val_loss: 0.6597 - val_accuracy: 0.7483\n",
            "Epoch 127/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6230 - accuracy: 0.7748 - val_loss: 0.6578 - val_accuracy: 0.7431\n",
            "Epoch 128/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.6213 - accuracy: 0.7714 - val_loss: 0.6569 - val_accuracy: 0.7483\n",
            "Epoch 129/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.6191 - accuracy: 0.7735 - val_loss: 0.6553 - val_accuracy: 0.7431\n",
            "Epoch 130/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.6169 - accuracy: 0.7765 - val_loss: 0.6543 - val_accuracy: 0.7483\n",
            "Epoch 131/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6149 - accuracy: 0.7800 - val_loss: 0.6517 - val_accuracy: 0.7466\n",
            "Epoch 132/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6128 - accuracy: 0.7757 - val_loss: 0.6501 - val_accuracy: 0.7448\n",
            "Epoch 133/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6109 - accuracy: 0.7752 - val_loss: 0.6486 - val_accuracy: 0.7500\n",
            "Epoch 134/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6092 - accuracy: 0.7804 - val_loss: 0.6475 - val_accuracy: 0.7483\n",
            "Epoch 135/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6069 - accuracy: 0.7791 - val_loss: 0.6463 - val_accuracy: 0.7483\n",
            "Epoch 136/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6051 - accuracy: 0.7770 - val_loss: 0.6451 - val_accuracy: 0.7483\n",
            "Epoch 137/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.6031 - accuracy: 0.7813 - val_loss: 0.6438 - val_accuracy: 0.7552\n",
            "Epoch 138/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.6010 - accuracy: 0.7800 - val_loss: 0.6419 - val_accuracy: 0.7517\n",
            "Epoch 139/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 0.5993 - accuracy: 0.7804 - val_loss: 0.6411 - val_accuracy: 0.7552\n",
            "Epoch 140/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5976 - accuracy: 0.7813 - val_loss: 0.6395 - val_accuracy: 0.7534\n",
            "Epoch 141/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5956 - accuracy: 0.7821 - val_loss: 0.6384 - val_accuracy: 0.7569\n",
            "Epoch 142/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.5936 - accuracy: 0.7804 - val_loss: 0.6371 - val_accuracy: 0.7569\n",
            "Epoch 143/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5922 - accuracy: 0.7821 - val_loss: 0.6355 - val_accuracy: 0.7534\n",
            "Epoch 144/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5903 - accuracy: 0.7860 - val_loss: 0.6346 - val_accuracy: 0.7500\n",
            "Epoch 145/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5885 - accuracy: 0.7834 - val_loss: 0.6342 - val_accuracy: 0.7552\n",
            "Epoch 146/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 0.5869 - accuracy: 0.7852 - val_loss: 0.6316 - val_accuracy: 0.7534\n",
            "Epoch 147/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5850 - accuracy: 0.7860 - val_loss: 0.6313 - val_accuracy: 0.7534\n",
            "Epoch 148/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.5835 - accuracy: 0.7882 - val_loss: 0.6300 - val_accuracy: 0.7586\n",
            "Epoch 149/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5816 - accuracy: 0.7912 - val_loss: 0.6287 - val_accuracy: 0.7552\n",
            "Epoch 150/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5803 - accuracy: 0.7895 - val_loss: 0.6281 - val_accuracy: 0.7552\n",
            "Epoch 151/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 0.5784 - accuracy: 0.7895 - val_loss: 0.6263 - val_accuracy: 0.7603\n",
            "Epoch 152/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 0.5767 - accuracy: 0.7929 - val_loss: 0.6249 - val_accuracy: 0.7638\n",
            "Epoch 153/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5752 - accuracy: 0.7916 - val_loss: 0.6240 - val_accuracy: 0.7603\n",
            "Epoch 154/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5735 - accuracy: 0.7947 - val_loss: 0.6233 - val_accuracy: 0.7655\n",
            "Epoch 155/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5720 - accuracy: 0.7955 - val_loss: 0.6223 - val_accuracy: 0.7655\n",
            "Epoch 156/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5705 - accuracy: 0.7947 - val_loss: 0.6206 - val_accuracy: 0.7621\n",
            "Epoch 157/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.5690 - accuracy: 0.7955 - val_loss: 0.6200 - val_accuracy: 0.7672\n",
            "Epoch 158/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.5673 - accuracy: 0.7959 - val_loss: 0.6189 - val_accuracy: 0.7655\n",
            "Epoch 159/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.5660 - accuracy: 0.7947 - val_loss: 0.6175 - val_accuracy: 0.7690\n",
            "Epoch 160/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.5643 - accuracy: 0.7942 - val_loss: 0.6159 - val_accuracy: 0.7672\n",
            "Epoch 161/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.5628 - accuracy: 0.7968 - val_loss: 0.6143 - val_accuracy: 0.7707\n",
            "Epoch 162/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.5615 - accuracy: 0.7985 - val_loss: 0.6141 - val_accuracy: 0.7690\n",
            "Epoch 163/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.5598 - accuracy: 0.7972 - val_loss: 0.6126 - val_accuracy: 0.7690\n",
            "Epoch 164/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.5585 - accuracy: 0.7972 - val_loss: 0.6116 - val_accuracy: 0.7690\n",
            "Epoch 165/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.5571 - accuracy: 0.7990 - val_loss: 0.6108 - val_accuracy: 0.7707\n",
            "Epoch 166/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.5556 - accuracy: 0.7994 - val_loss: 0.6102 - val_accuracy: 0.7724\n",
            "Epoch 167/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5539 - accuracy: 0.7994 - val_loss: 0.6086 - val_accuracy: 0.7724\n",
            "Epoch 168/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.5530 - accuracy: 0.8007 - val_loss: 0.6076 - val_accuracy: 0.7707\n",
            "Epoch 169/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.5513 - accuracy: 0.8020 - val_loss: 0.6067 - val_accuracy: 0.7724\n",
            "Epoch 170/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.5502 - accuracy: 0.8007 - val_loss: 0.6062 - val_accuracy: 0.7707\n",
            "Epoch 171/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.5484 - accuracy: 0.8028 - val_loss: 0.6047 - val_accuracy: 0.7724\n",
            "Epoch 172/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.5474 - accuracy: 0.8020 - val_loss: 0.6038 - val_accuracy: 0.7759\n",
            "Epoch 173/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5459 - accuracy: 0.8046 - val_loss: 0.6025 - val_accuracy: 0.7759\n",
            "Epoch 174/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5447 - accuracy: 0.8059 - val_loss: 0.6017 - val_accuracy: 0.7707\n",
            "Epoch 175/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.5430 - accuracy: 0.8041 - val_loss: 0.6007 - val_accuracy: 0.7690\n",
            "Epoch 176/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5421 - accuracy: 0.8033 - val_loss: 0.5992 - val_accuracy: 0.7759\n",
            "Epoch 177/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5404 - accuracy: 0.8046 - val_loss: 0.5990 - val_accuracy: 0.7707\n",
            "Epoch 178/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5391 - accuracy: 0.8080 - val_loss: 0.5983 - val_accuracy: 0.7707\n",
            "Epoch 179/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.5379 - accuracy: 0.8097 - val_loss: 0.5973 - val_accuracy: 0.7759\n",
            "Epoch 180/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5367 - accuracy: 0.8063 - val_loss: 0.5958 - val_accuracy: 0.7707\n",
            "Epoch 181/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.5356 - accuracy: 0.8076 - val_loss: 0.5944 - val_accuracy: 0.7741\n",
            "Epoch 182/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.5343 - accuracy: 0.8106 - val_loss: 0.5944 - val_accuracy: 0.7776\n",
            "Epoch 183/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5330 - accuracy: 0.8080 - val_loss: 0.5935 - val_accuracy: 0.7741\n",
            "Epoch 184/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5318 - accuracy: 0.8076 - val_loss: 0.5927 - val_accuracy: 0.7724\n",
            "Epoch 185/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5314 - accuracy: 0.8115 - val_loss: 0.5916 - val_accuracy: 0.7724\n",
            "Epoch 186/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5297 - accuracy: 0.8072 - val_loss: 0.5907 - val_accuracy: 0.7724\n",
            "Epoch 187/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5283 - accuracy: 0.8106 - val_loss: 0.5896 - val_accuracy: 0.7724\n",
            "Epoch 188/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.5268 - accuracy: 0.8128 - val_loss: 0.5887 - val_accuracy: 0.7793\n",
            "Epoch 189/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5259 - accuracy: 0.8145 - val_loss: 0.5876 - val_accuracy: 0.7759\n",
            "Epoch 190/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.5249 - accuracy: 0.8171 - val_loss: 0.5872 - val_accuracy: 0.7776\n",
            "Epoch 191/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.5241 - accuracy: 0.8097 - val_loss: 0.5873 - val_accuracy: 0.7759\n",
            "Epoch 192/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5222 - accuracy: 0.8145 - val_loss: 0.5857 - val_accuracy: 0.7759\n",
            "Epoch 193/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5216 - accuracy: 0.8162 - val_loss: 0.5848 - val_accuracy: 0.7793\n",
            "Epoch 194/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5207 - accuracy: 0.8149 - val_loss: 0.5836 - val_accuracy: 0.7776\n",
            "Epoch 195/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.5191 - accuracy: 0.8154 - val_loss: 0.5833 - val_accuracy: 0.7810\n",
            "Epoch 196/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5181 - accuracy: 0.8167 - val_loss: 0.5819 - val_accuracy: 0.7776\n",
            "Epoch 197/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5171 - accuracy: 0.8132 - val_loss: 0.5820 - val_accuracy: 0.7810\n",
            "Epoch 198/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.5158 - accuracy: 0.8141 - val_loss: 0.5805 - val_accuracy: 0.7828\n",
            "Epoch 199/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5148 - accuracy: 0.8171 - val_loss: 0.5796 - val_accuracy: 0.7828\n",
            "Epoch 200/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5137 - accuracy: 0.8171 - val_loss: 0.5793 - val_accuracy: 0.7828\n",
            "Epoch 201/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5127 - accuracy: 0.8167 - val_loss: 0.5785 - val_accuracy: 0.7810\n",
            "Epoch 202/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5115 - accuracy: 0.8205 - val_loss: 0.5776 - val_accuracy: 0.7862\n",
            "Epoch 203/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5108 - accuracy: 0.8188 - val_loss: 0.5767 - val_accuracy: 0.7828\n",
            "Epoch 204/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5097 - accuracy: 0.8184 - val_loss: 0.5762 - val_accuracy: 0.7828\n",
            "Epoch 205/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5084 - accuracy: 0.8210 - val_loss: 0.5753 - val_accuracy: 0.7793\n",
            "Epoch 206/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5074 - accuracy: 0.8205 - val_loss: 0.5748 - val_accuracy: 0.7845\n",
            "Epoch 207/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.5068 - accuracy: 0.8205 - val_loss: 0.5748 - val_accuracy: 0.7828\n",
            "Epoch 208/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5056 - accuracy: 0.8184 - val_loss: 0.5735 - val_accuracy: 0.7845\n",
            "Epoch 209/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5050 - accuracy: 0.8179 - val_loss: 0.5733 - val_accuracy: 0.7828\n",
            "Epoch 210/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5035 - accuracy: 0.8218 - val_loss: 0.5726 - val_accuracy: 0.7845\n",
            "Epoch 211/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5026 - accuracy: 0.8205 - val_loss: 0.5716 - val_accuracy: 0.7845\n",
            "Epoch 212/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.5017 - accuracy: 0.8192 - val_loss: 0.5711 - val_accuracy: 0.7845\n",
            "Epoch 213/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.5005 - accuracy: 0.8218 - val_loss: 0.5700 - val_accuracy: 0.7828\n",
            "Epoch 214/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4994 - accuracy: 0.8210 - val_loss: 0.5693 - val_accuracy: 0.7845\n",
            "Epoch 215/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4987 - accuracy: 0.8205 - val_loss: 0.5687 - val_accuracy: 0.7828\n",
            "Epoch 216/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.4980 - accuracy: 0.8214 - val_loss: 0.5684 - val_accuracy: 0.7862\n",
            "Epoch 217/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.4971 - accuracy: 0.8214 - val_loss: 0.5683 - val_accuracy: 0.7845\n",
            "Epoch 218/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 0.4958 - accuracy: 0.8227 - val_loss: 0.5677 - val_accuracy: 0.7810\n",
            "Epoch 219/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.4947 - accuracy: 0.8223 - val_loss: 0.5668 - val_accuracy: 0.7845\n",
            "Epoch 220/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 0.4942 - accuracy: 0.8244 - val_loss: 0.5661 - val_accuracy: 0.7828\n",
            "Epoch 221/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.4928 - accuracy: 0.8253 - val_loss: 0.5659 - val_accuracy: 0.7828\n",
            "Epoch 222/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 0.4924 - accuracy: 0.8253 - val_loss: 0.5659 - val_accuracy: 0.7845\n",
            "Epoch 223/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.4915 - accuracy: 0.8266 - val_loss: 0.5647 - val_accuracy: 0.7862\n",
            "Epoch 224/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.4906 - accuracy: 0.8266 - val_loss: 0.5634 - val_accuracy: 0.7897\n",
            "Epoch 225/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.4894 - accuracy: 0.8279 - val_loss: 0.5630 - val_accuracy: 0.7879\n",
            "Epoch 226/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.4883 - accuracy: 0.8279 - val_loss: 0.5622 - val_accuracy: 0.7879\n",
            "Epoch 227/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 0.4875 - accuracy: 0.8266 - val_loss: 0.5622 - val_accuracy: 0.7879\n",
            "Epoch 228/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.4870 - accuracy: 0.8261 - val_loss: 0.5616 - val_accuracy: 0.7862\n",
            "Epoch 229/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4857 - accuracy: 0.8274 - val_loss: 0.5604 - val_accuracy: 0.7862\n",
            "Epoch 230/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4849 - accuracy: 0.8261 - val_loss: 0.5602 - val_accuracy: 0.7845\n",
            "Epoch 231/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4838 - accuracy: 0.8283 - val_loss: 0.5591 - val_accuracy: 0.7862\n",
            "Epoch 232/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.4832 - accuracy: 0.8270 - val_loss: 0.5595 - val_accuracy: 0.7897\n",
            "Epoch 233/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4828 - accuracy: 0.8274 - val_loss: 0.5581 - val_accuracy: 0.7810\n",
            "Epoch 234/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4816 - accuracy: 0.8283 - val_loss: 0.5582 - val_accuracy: 0.7828\n",
            "Epoch 235/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4801 - accuracy: 0.8283 - val_loss: 0.5570 - val_accuracy: 0.7845\n",
            "Epoch 236/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4796 - accuracy: 0.8287 - val_loss: 0.5575 - val_accuracy: 0.7828\n",
            "Epoch 237/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4788 - accuracy: 0.8279 - val_loss: 0.5563 - val_accuracy: 0.7828\n",
            "Epoch 238/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4780 - accuracy: 0.8292 - val_loss: 0.5562 - val_accuracy: 0.7897\n",
            "Epoch 239/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4770 - accuracy: 0.8283 - val_loss: 0.5565 - val_accuracy: 0.7862\n",
            "Epoch 240/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4761 - accuracy: 0.8292 - val_loss: 0.5545 - val_accuracy: 0.7810\n",
            "Epoch 241/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4754 - accuracy: 0.8309 - val_loss: 0.5540 - val_accuracy: 0.7828\n",
            "Epoch 242/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4744 - accuracy: 0.8296 - val_loss: 0.5542 - val_accuracy: 0.7845\n",
            "Epoch 243/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4740 - accuracy: 0.8305 - val_loss: 0.5541 - val_accuracy: 0.7862\n",
            "Epoch 244/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4728 - accuracy: 0.8305 - val_loss: 0.5532 - val_accuracy: 0.7793\n",
            "Epoch 245/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4719 - accuracy: 0.8305 - val_loss: 0.5528 - val_accuracy: 0.7793\n",
            "Epoch 246/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4714 - accuracy: 0.8322 - val_loss: 0.5518 - val_accuracy: 0.7810\n",
            "Epoch 247/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.4708 - accuracy: 0.8313 - val_loss: 0.5508 - val_accuracy: 0.7810\n",
            "Epoch 248/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4697 - accuracy: 0.8300 - val_loss: 0.5507 - val_accuracy: 0.7828\n",
            "Epoch 249/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4690 - accuracy: 0.8292 - val_loss: 0.5491 - val_accuracy: 0.7845\n",
            "Epoch 250/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4678 - accuracy: 0.8313 - val_loss: 0.5497 - val_accuracy: 0.7845\n",
            "Epoch 251/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4673 - accuracy: 0.8335 - val_loss: 0.5490 - val_accuracy: 0.7845\n",
            "Epoch 252/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4666 - accuracy: 0.8318 - val_loss: 0.5484 - val_accuracy: 0.7879\n",
            "Epoch 253/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4654 - accuracy: 0.8330 - val_loss: 0.5486 - val_accuracy: 0.7862\n",
            "Epoch 254/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.4646 - accuracy: 0.8343 - val_loss: 0.5483 - val_accuracy: 0.7810\n",
            "Epoch 255/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4644 - accuracy: 0.8335 - val_loss: 0.5478 - val_accuracy: 0.7828\n",
            "Epoch 256/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4634 - accuracy: 0.8326 - val_loss: 0.5479 - val_accuracy: 0.7845\n",
            "Epoch 257/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4624 - accuracy: 0.8343 - val_loss: 0.5468 - val_accuracy: 0.7862\n",
            "Epoch 258/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4625 - accuracy: 0.8318 - val_loss: 0.5459 - val_accuracy: 0.7879\n",
            "Epoch 259/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4616 - accuracy: 0.8335 - val_loss: 0.5463 - val_accuracy: 0.7879\n",
            "Epoch 260/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4607 - accuracy: 0.8339 - val_loss: 0.5450 - val_accuracy: 0.7862\n",
            "Epoch 261/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4597 - accuracy: 0.8348 - val_loss: 0.5450 - val_accuracy: 0.7828\n",
            "Epoch 262/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4583 - accuracy: 0.8382 - val_loss: 0.5447 - val_accuracy: 0.7862\n",
            "Epoch 263/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4581 - accuracy: 0.8361 - val_loss: 0.5443 - val_accuracy: 0.7828\n",
            "Epoch 264/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4572 - accuracy: 0.8352 - val_loss: 0.5438 - val_accuracy: 0.7897\n",
            "Epoch 265/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4563 - accuracy: 0.8352 - val_loss: 0.5433 - val_accuracy: 0.7862\n",
            "Epoch 266/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4557 - accuracy: 0.8348 - val_loss: 0.5432 - val_accuracy: 0.7862\n",
            "Epoch 267/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4549 - accuracy: 0.8369 - val_loss: 0.5418 - val_accuracy: 0.7897\n",
            "Epoch 268/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4541 - accuracy: 0.8361 - val_loss: 0.5414 - val_accuracy: 0.7879\n",
            "Epoch 269/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4537 - accuracy: 0.8378 - val_loss: 0.5405 - val_accuracy: 0.7897\n",
            "Epoch 270/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4530 - accuracy: 0.8374 - val_loss: 0.5413 - val_accuracy: 0.7914\n",
            "Epoch 271/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4524 - accuracy: 0.8404 - val_loss: 0.5399 - val_accuracy: 0.7914\n",
            "Epoch 272/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4509 - accuracy: 0.8356 - val_loss: 0.5400 - val_accuracy: 0.7897\n",
            "Epoch 273/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4506 - accuracy: 0.8391 - val_loss: 0.5394 - val_accuracy: 0.7879\n",
            "Epoch 274/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4500 - accuracy: 0.8391 - val_loss: 0.5399 - val_accuracy: 0.7931\n",
            "Epoch 275/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4492 - accuracy: 0.8356 - val_loss: 0.5388 - val_accuracy: 0.7879\n",
            "Epoch 276/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4482 - accuracy: 0.8356 - val_loss: 0.5391 - val_accuracy: 0.7914\n",
            "Epoch 277/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4476 - accuracy: 0.8369 - val_loss: 0.5381 - val_accuracy: 0.7931\n",
            "Epoch 278/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4467 - accuracy: 0.8387 - val_loss: 0.5377 - val_accuracy: 0.7914\n",
            "Epoch 279/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4461 - accuracy: 0.8391 - val_loss: 0.5374 - val_accuracy: 0.7931\n",
            "Epoch 280/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4456 - accuracy: 0.8391 - val_loss: 0.5373 - val_accuracy: 0.7948\n",
            "Epoch 281/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4449 - accuracy: 0.8391 - val_loss: 0.5367 - val_accuracy: 0.7931\n",
            "Epoch 282/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4438 - accuracy: 0.8404 - val_loss: 0.5363 - val_accuracy: 0.7897\n",
            "Epoch 283/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4436 - accuracy: 0.8374 - val_loss: 0.5355 - val_accuracy: 0.7914\n",
            "Epoch 284/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4426 - accuracy: 0.8382 - val_loss: 0.5353 - val_accuracy: 0.7897\n",
            "Epoch 285/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4419 - accuracy: 0.8378 - val_loss: 0.5351 - val_accuracy: 0.7914\n",
            "Epoch 286/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4411 - accuracy: 0.8404 - val_loss: 0.5338 - val_accuracy: 0.7897\n",
            "Epoch 287/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4407 - accuracy: 0.8408 - val_loss: 0.5338 - val_accuracy: 0.7879\n",
            "Epoch 288/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4400 - accuracy: 0.8378 - val_loss: 0.5335 - val_accuracy: 0.7897\n",
            "Epoch 289/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4392 - accuracy: 0.8399 - val_loss: 0.5331 - val_accuracy: 0.7879\n",
            "Epoch 290/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4388 - accuracy: 0.8412 - val_loss: 0.5330 - val_accuracy: 0.7914\n",
            "Epoch 291/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4375 - accuracy: 0.8387 - val_loss: 0.5319 - val_accuracy: 0.7897\n",
            "Epoch 292/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4369 - accuracy: 0.8421 - val_loss: 0.5308 - val_accuracy: 0.7966\n",
            "Epoch 293/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4366 - accuracy: 0.8387 - val_loss: 0.5312 - val_accuracy: 0.7966\n",
            "Epoch 294/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4358 - accuracy: 0.8399 - val_loss: 0.5311 - val_accuracy: 0.7879\n",
            "Epoch 295/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4349 - accuracy: 0.8425 - val_loss: 0.5300 - val_accuracy: 0.7914\n",
            "Epoch 296/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4346 - accuracy: 0.8421 - val_loss: 0.5296 - val_accuracy: 0.7966\n",
            "Epoch 297/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4335 - accuracy: 0.8443 - val_loss: 0.5290 - val_accuracy: 0.7966\n",
            "Epoch 298/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4329 - accuracy: 0.8421 - val_loss: 0.5294 - val_accuracy: 0.7931\n",
            "Epoch 299/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4320 - accuracy: 0.8412 - val_loss: 0.5289 - val_accuracy: 0.7983\n",
            "Epoch 300/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4318 - accuracy: 0.8425 - val_loss: 0.5290 - val_accuracy: 0.7931\n",
            "Epoch 301/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 0.4313 - accuracy: 0.8412 - val_loss: 0.5271 - val_accuracy: 0.7931\n",
            "Epoch 302/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 0.4303 - accuracy: 0.8460 - val_loss: 0.5281 - val_accuracy: 0.7966\n",
            "Epoch 303/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 0.4295 - accuracy: 0.8434 - val_loss: 0.5270 - val_accuracy: 0.7983\n",
            "Epoch 304/1000\n",
            "37/37 [==============================] - 0s 9ms/step - loss: 0.4290 - accuracy: 0.8438 - val_loss: 0.5274 - val_accuracy: 0.8000\n",
            "Epoch 305/1000\n",
            "37/37 [==============================] - 0s 10ms/step - loss: 0.4280 - accuracy: 0.8434 - val_loss: 0.5266 - val_accuracy: 0.7948\n",
            "Epoch 306/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 0.4280 - accuracy: 0.8451 - val_loss: 0.5263 - val_accuracy: 0.8000\n",
            "Epoch 307/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 0.4269 - accuracy: 0.8430 - val_loss: 0.5258 - val_accuracy: 0.7966\n",
            "Epoch 308/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 0.4266 - accuracy: 0.8443 - val_loss: 0.5256 - val_accuracy: 0.7931\n",
            "Epoch 309/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 0.4256 - accuracy: 0.8430 - val_loss: 0.5249 - val_accuracy: 0.7966\n",
            "Epoch 310/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4249 - accuracy: 0.8447 - val_loss: 0.5246 - val_accuracy: 0.7966\n",
            "Epoch 311/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4246 - accuracy: 0.8438 - val_loss: 0.5240 - val_accuracy: 0.7983\n",
            "Epoch 312/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.4235 - accuracy: 0.8438 - val_loss: 0.5243 - val_accuracy: 0.7948\n",
            "Epoch 313/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4229 - accuracy: 0.8443 - val_loss: 0.5239 - val_accuracy: 0.7948\n",
            "Epoch 314/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4222 - accuracy: 0.8460 - val_loss: 0.5230 - val_accuracy: 0.7983\n",
            "Epoch 315/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4218 - accuracy: 0.8438 - val_loss: 0.5228 - val_accuracy: 0.8000\n",
            "Epoch 316/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4214 - accuracy: 0.8443 - val_loss: 0.5225 - val_accuracy: 0.7966\n",
            "Epoch 317/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4202 - accuracy: 0.8451 - val_loss: 0.5219 - val_accuracy: 0.7983\n",
            "Epoch 318/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4200 - accuracy: 0.8460 - val_loss: 0.5213 - val_accuracy: 0.7983\n",
            "Epoch 319/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4196 - accuracy: 0.8456 - val_loss: 0.5217 - val_accuracy: 0.8000\n",
            "Epoch 320/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4181 - accuracy: 0.8473 - val_loss: 0.5211 - val_accuracy: 0.8017\n",
            "Epoch 321/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4177 - accuracy: 0.8473 - val_loss: 0.5216 - val_accuracy: 0.7983\n",
            "Epoch 322/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4176 - accuracy: 0.8447 - val_loss: 0.5207 - val_accuracy: 0.8000\n",
            "Epoch 323/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4168 - accuracy: 0.8486 - val_loss: 0.5201 - val_accuracy: 0.8000\n",
            "Epoch 324/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4163 - accuracy: 0.8464 - val_loss: 0.5200 - val_accuracy: 0.8000\n",
            "Epoch 325/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4156 - accuracy: 0.8481 - val_loss: 0.5193 - val_accuracy: 0.8000\n",
            "Epoch 326/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4147 - accuracy: 0.8499 - val_loss: 0.5191 - val_accuracy: 0.8000\n",
            "Epoch 327/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4138 - accuracy: 0.8486 - val_loss: 0.5189 - val_accuracy: 0.8000\n",
            "Epoch 328/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4135 - accuracy: 0.8464 - val_loss: 0.5193 - val_accuracy: 0.7983\n",
            "Epoch 329/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4123 - accuracy: 0.8481 - val_loss: 0.5181 - val_accuracy: 0.8000\n",
            "Epoch 330/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4121 - accuracy: 0.8507 - val_loss: 0.5177 - val_accuracy: 0.7966\n",
            "Epoch 331/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4116 - accuracy: 0.8486 - val_loss: 0.5173 - val_accuracy: 0.7966\n",
            "Epoch 332/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4111 - accuracy: 0.8499 - val_loss: 0.5171 - val_accuracy: 0.7966\n",
            "Epoch 333/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4105 - accuracy: 0.8490 - val_loss: 0.5180 - val_accuracy: 0.7948\n",
            "Epoch 334/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4096 - accuracy: 0.8494 - val_loss: 0.5169 - val_accuracy: 0.7983\n",
            "Epoch 335/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4094 - accuracy: 0.8525 - val_loss: 0.5162 - val_accuracy: 0.7983\n",
            "Epoch 336/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4085 - accuracy: 0.8516 - val_loss: 0.5172 - val_accuracy: 0.8017\n",
            "Epoch 337/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4077 - accuracy: 0.8516 - val_loss: 0.5155 - val_accuracy: 0.8017\n",
            "Epoch 338/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4071 - accuracy: 0.8507 - val_loss: 0.5148 - val_accuracy: 0.8000\n",
            "Epoch 339/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4065 - accuracy: 0.8520 - val_loss: 0.5145 - val_accuracy: 0.8034\n",
            "Epoch 340/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4059 - accuracy: 0.8512 - val_loss: 0.5138 - val_accuracy: 0.8034\n",
            "Epoch 341/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4051 - accuracy: 0.8512 - val_loss: 0.5143 - val_accuracy: 0.8034\n",
            "Epoch 342/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4051 - accuracy: 0.8512 - val_loss: 0.5139 - val_accuracy: 0.8034\n",
            "Epoch 343/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4041 - accuracy: 0.8507 - val_loss: 0.5132 - val_accuracy: 0.8034\n",
            "Epoch 344/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4038 - accuracy: 0.8538 - val_loss: 0.5124 - val_accuracy: 0.8069\n",
            "Epoch 345/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4034 - accuracy: 0.8529 - val_loss: 0.5127 - val_accuracy: 0.8034\n",
            "Epoch 346/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4028 - accuracy: 0.8525 - val_loss: 0.5132 - val_accuracy: 0.8017\n",
            "Epoch 347/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4020 - accuracy: 0.8529 - val_loss: 0.5120 - val_accuracy: 0.8017\n",
            "Epoch 348/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4017 - accuracy: 0.8542 - val_loss: 0.5118 - val_accuracy: 0.8034\n",
            "Epoch 349/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.4011 - accuracy: 0.8542 - val_loss: 0.5115 - val_accuracy: 0.8034\n",
            "Epoch 350/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.4006 - accuracy: 0.8520 - val_loss: 0.5113 - val_accuracy: 0.8034\n",
            "Epoch 351/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3998 - accuracy: 0.8555 - val_loss: 0.5108 - val_accuracy: 0.8034\n",
            "Epoch 352/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3992 - accuracy: 0.8533 - val_loss: 0.5103 - val_accuracy: 0.8034\n",
            "Epoch 353/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3983 - accuracy: 0.8555 - val_loss: 0.5105 - val_accuracy: 0.8034\n",
            "Epoch 354/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3980 - accuracy: 0.8533 - val_loss: 0.5098 - val_accuracy: 0.8034\n",
            "Epoch 355/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3974 - accuracy: 0.8538 - val_loss: 0.5097 - val_accuracy: 0.8034\n",
            "Epoch 356/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3969 - accuracy: 0.8533 - val_loss: 0.5092 - val_accuracy: 0.8034\n",
            "Epoch 357/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3962 - accuracy: 0.8555 - val_loss: 0.5096 - val_accuracy: 0.8052\n",
            "Epoch 358/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3959 - accuracy: 0.8559 - val_loss: 0.5086 - val_accuracy: 0.8052\n",
            "Epoch 359/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3949 - accuracy: 0.8559 - val_loss: 0.5084 - val_accuracy: 0.8052\n",
            "Epoch 360/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3950 - accuracy: 0.8542 - val_loss: 0.5076 - val_accuracy: 0.8034\n",
            "Epoch 361/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3942 - accuracy: 0.8563 - val_loss: 0.5092 - val_accuracy: 0.8052\n",
            "Epoch 362/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3936 - accuracy: 0.8542 - val_loss: 0.5077 - val_accuracy: 0.8034\n",
            "Epoch 363/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3928 - accuracy: 0.8533 - val_loss: 0.5071 - val_accuracy: 0.8052\n",
            "Epoch 364/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3922 - accuracy: 0.8555 - val_loss: 0.5070 - val_accuracy: 0.8052\n",
            "Epoch 365/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3917 - accuracy: 0.8550 - val_loss: 0.5071 - val_accuracy: 0.8069\n",
            "Epoch 366/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3914 - accuracy: 0.8568 - val_loss: 0.5058 - val_accuracy: 0.8052\n",
            "Epoch 367/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3904 - accuracy: 0.8550 - val_loss: 0.5051 - val_accuracy: 0.8052\n",
            "Epoch 368/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3901 - accuracy: 0.8576 - val_loss: 0.5054 - val_accuracy: 0.8052\n",
            "Epoch 369/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3895 - accuracy: 0.8568 - val_loss: 0.5058 - val_accuracy: 0.8000\n",
            "Epoch 370/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3889 - accuracy: 0.8576 - val_loss: 0.5051 - val_accuracy: 0.8034\n",
            "Epoch 371/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3885 - accuracy: 0.8563 - val_loss: 0.5046 - val_accuracy: 0.8086\n",
            "Epoch 372/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3877 - accuracy: 0.8576 - val_loss: 0.5044 - val_accuracy: 0.8069\n",
            "Epoch 373/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3872 - accuracy: 0.8585 - val_loss: 0.5042 - val_accuracy: 0.8069\n",
            "Epoch 374/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3871 - accuracy: 0.8572 - val_loss: 0.5041 - val_accuracy: 0.8103\n",
            "Epoch 375/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3860 - accuracy: 0.8594 - val_loss: 0.5040 - val_accuracy: 0.8052\n",
            "Epoch 376/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3857 - accuracy: 0.8585 - val_loss: 0.5035 - val_accuracy: 0.8069\n",
            "Epoch 377/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3853 - accuracy: 0.8585 - val_loss: 0.5038 - val_accuracy: 0.8034\n",
            "Epoch 378/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3846 - accuracy: 0.8581 - val_loss: 0.5030 - val_accuracy: 0.8086\n",
            "Epoch 379/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3840 - accuracy: 0.8615 - val_loss: 0.5032 - val_accuracy: 0.8052\n",
            "Epoch 380/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3834 - accuracy: 0.8607 - val_loss: 0.5021 - val_accuracy: 0.8069\n",
            "Epoch 381/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3829 - accuracy: 0.8585 - val_loss: 0.5032 - val_accuracy: 0.8069\n",
            "Epoch 382/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3827 - accuracy: 0.8576 - val_loss: 0.5034 - val_accuracy: 0.8069\n",
            "Epoch 383/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3819 - accuracy: 0.8598 - val_loss: 0.5026 - val_accuracy: 0.8069\n",
            "Epoch 384/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3816 - accuracy: 0.8602 - val_loss: 0.5035 - val_accuracy: 0.8034\n",
            "Epoch 385/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3809 - accuracy: 0.8594 - val_loss: 0.5019 - val_accuracy: 0.8086\n",
            "Epoch 386/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3802 - accuracy: 0.8611 - val_loss: 0.5020 - val_accuracy: 0.8086\n",
            "Epoch 387/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3798 - accuracy: 0.8598 - val_loss: 0.5021 - val_accuracy: 0.8086\n",
            "Epoch 388/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3791 - accuracy: 0.8602 - val_loss: 0.5013 - val_accuracy: 0.8086\n",
            "Epoch 389/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3788 - accuracy: 0.8619 - val_loss: 0.5012 - val_accuracy: 0.8086\n",
            "Epoch 390/1000\n",
            "37/37 [==============================] - 0s 12ms/step - loss: 0.3783 - accuracy: 0.8619 - val_loss: 0.5013 - val_accuracy: 0.8086\n",
            "Epoch 391/1000\n",
            "37/37 [==============================] - 0s 9ms/step - loss: 0.3779 - accuracy: 0.8607 - val_loss: 0.5012 - val_accuracy: 0.8052\n",
            "Epoch 392/1000\n",
            "37/37 [==============================] - 0s 9ms/step - loss: 0.3771 - accuracy: 0.8589 - val_loss: 0.5013 - val_accuracy: 0.8086\n",
            "Epoch 393/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.3768 - accuracy: 0.8641 - val_loss: 0.5003 - val_accuracy: 0.8086\n",
            "Epoch 394/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.3766 - accuracy: 0.8615 - val_loss: 0.5003 - val_accuracy: 0.8086\n",
            "Epoch 395/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 0.3759 - accuracy: 0.8619 - val_loss: 0.5003 - val_accuracy: 0.8086\n",
            "Epoch 396/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.3752 - accuracy: 0.8615 - val_loss: 0.5002 - val_accuracy: 0.8103\n",
            "Epoch 397/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.3749 - accuracy: 0.8641 - val_loss: 0.4994 - val_accuracy: 0.8138\n",
            "Epoch 398/1000\n",
            "37/37 [==============================] - 0s 9ms/step - loss: 0.3739 - accuracy: 0.8632 - val_loss: 0.4996 - val_accuracy: 0.8155\n",
            "Epoch 399/1000\n",
            "37/37 [==============================] - 0s 11ms/step - loss: 0.3740 - accuracy: 0.8628 - val_loss: 0.4990 - val_accuracy: 0.8121\n",
            "Epoch 400/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.3733 - accuracy: 0.8637 - val_loss: 0.4987 - val_accuracy: 0.8138\n",
            "Epoch 401/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 0.3729 - accuracy: 0.8615 - val_loss: 0.4991 - val_accuracy: 0.8155\n",
            "Epoch 402/1000\n",
            "37/37 [==============================] - 0s 11ms/step - loss: 0.3725 - accuracy: 0.8663 - val_loss: 0.4984 - val_accuracy: 0.8155\n",
            "Epoch 403/1000\n",
            "37/37 [==============================] - 0s 10ms/step - loss: 0.3714 - accuracy: 0.8637 - val_loss: 0.4985 - val_accuracy: 0.8155\n",
            "Epoch 404/1000\n",
            "37/37 [==============================] - 0s 9ms/step - loss: 0.3709 - accuracy: 0.8667 - val_loss: 0.4981 - val_accuracy: 0.8155\n",
            "Epoch 405/1000\n",
            "37/37 [==============================] - 0s 9ms/step - loss: 0.3706 - accuracy: 0.8654 - val_loss: 0.4973 - val_accuracy: 0.8138\n",
            "Epoch 406/1000\n",
            "37/37 [==============================] - 0s 13ms/step - loss: 0.3702 - accuracy: 0.8654 - val_loss: 0.4977 - val_accuracy: 0.8172\n",
            "Epoch 407/1000\n",
            "37/37 [==============================] - 0s 11ms/step - loss: 0.3696 - accuracy: 0.8663 - val_loss: 0.4969 - val_accuracy: 0.8172\n",
            "Epoch 408/1000\n",
            "37/37 [==============================] - 0s 11ms/step - loss: 0.3692 - accuracy: 0.8654 - val_loss: 0.4971 - val_accuracy: 0.8155\n",
            "Epoch 409/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 0.3689 - accuracy: 0.8663 - val_loss: 0.4966 - val_accuracy: 0.8138\n",
            "Epoch 410/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 0.3681 - accuracy: 0.8663 - val_loss: 0.4973 - val_accuracy: 0.8190\n",
            "Epoch 411/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.3675 - accuracy: 0.8680 - val_loss: 0.4963 - val_accuracy: 0.8155\n",
            "Epoch 412/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.3670 - accuracy: 0.8684 - val_loss: 0.4962 - val_accuracy: 0.8155\n",
            "Epoch 413/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.3665 - accuracy: 0.8667 - val_loss: 0.4963 - val_accuracy: 0.8190\n",
            "Epoch 414/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.3663 - accuracy: 0.8689 - val_loss: 0.4967 - val_accuracy: 0.8155\n",
            "Epoch 415/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.3661 - accuracy: 0.8671 - val_loss: 0.4959 - val_accuracy: 0.8155\n",
            "Epoch 416/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 0.3653 - accuracy: 0.8689 - val_loss: 0.4953 - val_accuracy: 0.8155\n",
            "Epoch 417/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 0.3644 - accuracy: 0.8684 - val_loss: 0.4957 - val_accuracy: 0.8155\n",
            "Epoch 418/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 0.3641 - accuracy: 0.8701 - val_loss: 0.4950 - val_accuracy: 0.8155\n",
            "Epoch 419/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.3636 - accuracy: 0.8701 - val_loss: 0.4942 - val_accuracy: 0.8155\n",
            "Epoch 420/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 0.3631 - accuracy: 0.8701 - val_loss: 0.4951 - val_accuracy: 0.8155\n",
            "Epoch 421/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 0.3626 - accuracy: 0.8710 - val_loss: 0.4941 - val_accuracy: 0.8155\n",
            "Epoch 422/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.3623 - accuracy: 0.8719 - val_loss: 0.4940 - val_accuracy: 0.8155\n",
            "Epoch 423/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 0.3617 - accuracy: 0.8697 - val_loss: 0.4942 - val_accuracy: 0.8172\n",
            "Epoch 424/1000\n",
            "37/37 [==============================] - 0s 10ms/step - loss: 0.3614 - accuracy: 0.8697 - val_loss: 0.4946 - val_accuracy: 0.8155\n",
            "Epoch 425/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3613 - accuracy: 0.8732 - val_loss: 0.4948 - val_accuracy: 0.8155\n",
            "Epoch 426/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3603 - accuracy: 0.8706 - val_loss: 0.4934 - val_accuracy: 0.8172\n",
            "Epoch 427/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3600 - accuracy: 0.8719 - val_loss: 0.4937 - val_accuracy: 0.8155\n",
            "Epoch 428/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3595 - accuracy: 0.8740 - val_loss: 0.4943 - val_accuracy: 0.8172\n",
            "Epoch 429/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3587 - accuracy: 0.8710 - val_loss: 0.4942 - val_accuracy: 0.8155\n",
            "Epoch 430/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3585 - accuracy: 0.8706 - val_loss: 0.4930 - val_accuracy: 0.8172\n",
            "Epoch 431/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3579 - accuracy: 0.8714 - val_loss: 0.4935 - val_accuracy: 0.8155\n",
            "Epoch 432/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3574 - accuracy: 0.8732 - val_loss: 0.4929 - val_accuracy: 0.8172\n",
            "Epoch 433/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3570 - accuracy: 0.8732 - val_loss: 0.4932 - val_accuracy: 0.8155\n",
            "Epoch 434/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3564 - accuracy: 0.8732 - val_loss: 0.4941 - val_accuracy: 0.8172\n",
            "Epoch 435/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3561 - accuracy: 0.8732 - val_loss: 0.4938 - val_accuracy: 0.8172\n",
            "Epoch 436/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3560 - accuracy: 0.8710 - val_loss: 0.4926 - val_accuracy: 0.8155\n",
            "Epoch 437/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3551 - accuracy: 0.8740 - val_loss: 0.4928 - val_accuracy: 0.8138\n",
            "Epoch 438/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3548 - accuracy: 0.8723 - val_loss: 0.4933 - val_accuracy: 0.8138\n",
            "Epoch 439/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3542 - accuracy: 0.8736 - val_loss: 0.4923 - val_accuracy: 0.8138\n",
            "Epoch 440/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3536 - accuracy: 0.8762 - val_loss: 0.4921 - val_accuracy: 0.8155\n",
            "Epoch 441/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3534 - accuracy: 0.8736 - val_loss: 0.4924 - val_accuracy: 0.8155\n",
            "Epoch 442/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3531 - accuracy: 0.8736 - val_loss: 0.4919 - val_accuracy: 0.8172\n",
            "Epoch 443/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.3522 - accuracy: 0.8732 - val_loss: 0.4909 - val_accuracy: 0.8155\n",
            "Epoch 444/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.3521 - accuracy: 0.8749 - val_loss: 0.4926 - val_accuracy: 0.8172\n",
            "Epoch 445/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 0.3519 - accuracy: 0.8749 - val_loss: 0.4912 - val_accuracy: 0.8190\n",
            "Epoch 446/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.3512 - accuracy: 0.8762 - val_loss: 0.4920 - val_accuracy: 0.8172\n",
            "Epoch 447/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3504 - accuracy: 0.8736 - val_loss: 0.4909 - val_accuracy: 0.8155\n",
            "Epoch 448/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3501 - accuracy: 0.8753 - val_loss: 0.4913 - val_accuracy: 0.8138\n",
            "Epoch 449/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3497 - accuracy: 0.8762 - val_loss: 0.4909 - val_accuracy: 0.8172\n",
            "Epoch 450/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3492 - accuracy: 0.8762 - val_loss: 0.4901 - val_accuracy: 0.8155\n",
            "Epoch 451/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3483 - accuracy: 0.8766 - val_loss: 0.4910 - val_accuracy: 0.8172\n",
            "Epoch 452/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 0.3481 - accuracy: 0.8770 - val_loss: 0.4903 - val_accuracy: 0.8172\n",
            "Epoch 453/1000\n",
            "37/37 [==============================] - 0s 11ms/step - loss: 0.3478 - accuracy: 0.8753 - val_loss: 0.4902 - val_accuracy: 0.8190\n",
            "Epoch 454/1000\n",
            "37/37 [==============================] - 1s 19ms/step - loss: 0.3472 - accuracy: 0.8762 - val_loss: 0.4901 - val_accuracy: 0.8155\n",
            "Epoch 455/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.3467 - accuracy: 0.8753 - val_loss: 0.4897 - val_accuracy: 0.8172\n",
            "Epoch 456/1000\n",
            "37/37 [==============================] - 0s 9ms/step - loss: 0.3461 - accuracy: 0.8783 - val_loss: 0.4894 - val_accuracy: 0.8172\n",
            "Epoch 457/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3460 - accuracy: 0.8753 - val_loss: 0.4897 - val_accuracy: 0.8172\n",
            "Epoch 458/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.3457 - accuracy: 0.8762 - val_loss: 0.4892 - val_accuracy: 0.8172\n",
            "Epoch 459/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.3447 - accuracy: 0.8766 - val_loss: 0.4884 - val_accuracy: 0.8172\n",
            "Epoch 460/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3446 - accuracy: 0.8788 - val_loss: 0.4894 - val_accuracy: 0.8172\n",
            "Epoch 461/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 0.3440 - accuracy: 0.8788 - val_loss: 0.4884 - val_accuracy: 0.8172\n",
            "Epoch 462/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.3438 - accuracy: 0.8775 - val_loss: 0.4889 - val_accuracy: 0.8172\n",
            "Epoch 463/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.3428 - accuracy: 0.8792 - val_loss: 0.4886 - val_accuracy: 0.8172\n",
            "Epoch 464/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 0.3430 - accuracy: 0.8770 - val_loss: 0.4888 - val_accuracy: 0.8155\n",
            "Epoch 465/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.3425 - accuracy: 0.8783 - val_loss: 0.4884 - val_accuracy: 0.8190\n",
            "Epoch 466/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 0.3419 - accuracy: 0.8801 - val_loss: 0.4883 - val_accuracy: 0.8155\n",
            "Epoch 467/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 0.3414 - accuracy: 0.8775 - val_loss: 0.4879 - val_accuracy: 0.8172\n",
            "Epoch 468/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 0.3409 - accuracy: 0.8796 - val_loss: 0.4876 - val_accuracy: 0.8190\n",
            "Epoch 469/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.3407 - accuracy: 0.8779 - val_loss: 0.4887 - val_accuracy: 0.8172\n",
            "Epoch 470/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.3399 - accuracy: 0.8796 - val_loss: 0.4874 - val_accuracy: 0.8190\n",
            "Epoch 471/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.3393 - accuracy: 0.8796 - val_loss: 0.4870 - val_accuracy: 0.8190\n",
            "Epoch 472/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 0.3395 - accuracy: 0.8801 - val_loss: 0.4873 - val_accuracy: 0.8190\n",
            "Epoch 473/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.3389 - accuracy: 0.8792 - val_loss: 0.4880 - val_accuracy: 0.8155\n",
            "Epoch 474/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.3381 - accuracy: 0.8814 - val_loss: 0.4870 - val_accuracy: 0.8207\n",
            "Epoch 475/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.3379 - accuracy: 0.8809 - val_loss: 0.4872 - val_accuracy: 0.8190\n",
            "Epoch 476/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.3376 - accuracy: 0.8788 - val_loss: 0.4870 - val_accuracy: 0.8190\n",
            "Epoch 477/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3380 - accuracy: 0.8792 - val_loss: 0.4871 - val_accuracy: 0.8190\n",
            "Epoch 478/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3370 - accuracy: 0.8805 - val_loss: 0.4855 - val_accuracy: 0.8224\n",
            "Epoch 479/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3361 - accuracy: 0.8796 - val_loss: 0.4854 - val_accuracy: 0.8207\n",
            "Epoch 480/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3358 - accuracy: 0.8796 - val_loss: 0.4862 - val_accuracy: 0.8224\n",
            "Epoch 481/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3362 - accuracy: 0.8801 - val_loss: 0.4860 - val_accuracy: 0.8190\n",
            "Epoch 482/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3346 - accuracy: 0.8801 - val_loss: 0.4856 - val_accuracy: 0.8207\n",
            "Epoch 483/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3342 - accuracy: 0.8822 - val_loss: 0.4855 - val_accuracy: 0.8190\n",
            "Epoch 484/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3337 - accuracy: 0.8809 - val_loss: 0.4860 - val_accuracy: 0.8207\n",
            "Epoch 485/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3334 - accuracy: 0.8809 - val_loss: 0.4854 - val_accuracy: 0.8207\n",
            "Epoch 486/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3336 - accuracy: 0.8805 - val_loss: 0.4852 - val_accuracy: 0.8190\n",
            "Epoch 487/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3328 - accuracy: 0.8822 - val_loss: 0.4849 - val_accuracy: 0.8207\n",
            "Epoch 488/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3324 - accuracy: 0.8818 - val_loss: 0.4858 - val_accuracy: 0.8207\n",
            "Epoch 489/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3317 - accuracy: 0.8822 - val_loss: 0.4853 - val_accuracy: 0.8224\n",
            "Epoch 490/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3312 - accuracy: 0.8822 - val_loss: 0.4851 - val_accuracy: 0.8172\n",
            "Epoch 491/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3312 - accuracy: 0.8840 - val_loss: 0.4847 - val_accuracy: 0.8224\n",
            "Epoch 492/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3305 - accuracy: 0.8827 - val_loss: 0.4842 - val_accuracy: 0.8224\n",
            "Epoch 493/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3304 - accuracy: 0.8818 - val_loss: 0.4847 - val_accuracy: 0.8190\n",
            "Epoch 494/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3299 - accuracy: 0.8835 - val_loss: 0.4855 - val_accuracy: 0.8207\n",
            "Epoch 495/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3295 - accuracy: 0.8852 - val_loss: 0.4842 - val_accuracy: 0.8207\n",
            "Epoch 496/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3286 - accuracy: 0.8827 - val_loss: 0.4845 - val_accuracy: 0.8190\n",
            "Epoch 497/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3285 - accuracy: 0.8831 - val_loss: 0.4833 - val_accuracy: 0.8190\n",
            "Epoch 498/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3281 - accuracy: 0.8827 - val_loss: 0.4839 - val_accuracy: 0.8207\n",
            "Epoch 499/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.3276 - accuracy: 0.8835 - val_loss: 0.4842 - val_accuracy: 0.8190\n",
            "Epoch 500/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.3273 - accuracy: 0.8822 - val_loss: 0.4842 - val_accuracy: 0.8190\n",
            "Epoch 501/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3266 - accuracy: 0.8831 - val_loss: 0.4838 - val_accuracy: 0.8190\n",
            "Epoch 502/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3259 - accuracy: 0.8840 - val_loss: 0.4843 - val_accuracy: 0.8224\n",
            "Epoch 503/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3257 - accuracy: 0.8852 - val_loss: 0.4834 - val_accuracy: 0.8207\n",
            "Epoch 504/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3254 - accuracy: 0.8835 - val_loss: 0.4832 - val_accuracy: 0.8190\n",
            "Epoch 505/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3253 - accuracy: 0.8844 - val_loss: 0.4829 - val_accuracy: 0.8190\n",
            "Epoch 506/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3247 - accuracy: 0.8857 - val_loss: 0.4834 - val_accuracy: 0.8207\n",
            "Epoch 507/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3243 - accuracy: 0.8831 - val_loss: 0.4838 - val_accuracy: 0.8190\n",
            "Epoch 508/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3240 - accuracy: 0.8840 - val_loss: 0.4832 - val_accuracy: 0.8190\n",
            "Epoch 509/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3235 - accuracy: 0.8878 - val_loss: 0.4833 - val_accuracy: 0.8172\n",
            "Epoch 510/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3231 - accuracy: 0.8857 - val_loss: 0.4831 - val_accuracy: 0.8207\n",
            "Epoch 511/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3231 - accuracy: 0.8861 - val_loss: 0.4829 - val_accuracy: 0.8190\n",
            "Epoch 512/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3227 - accuracy: 0.8852 - val_loss: 0.4835 - val_accuracy: 0.8190\n",
            "Epoch 513/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3219 - accuracy: 0.8861 - val_loss: 0.4829 - val_accuracy: 0.8190\n",
            "Epoch 514/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3214 - accuracy: 0.8852 - val_loss: 0.4828 - val_accuracy: 0.8207\n",
            "Epoch 515/1000\n",
            "37/37 [==============================] - 0s 3ms/step - loss: 0.3210 - accuracy: 0.8870 - val_loss: 0.4833 - val_accuracy: 0.8207\n",
            "Epoch 516/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3208 - accuracy: 0.8870 - val_loss: 0.4822 - val_accuracy: 0.8190\n",
            "Epoch 517/1000\n",
            "37/37 [==============================] - 0s 6ms/step - loss: 0.3204 - accuracy: 0.8857 - val_loss: 0.4829 - val_accuracy: 0.8224\n",
            "Epoch 518/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.3201 - accuracy: 0.8844 - val_loss: 0.4827 - val_accuracy: 0.8190\n",
            "Epoch 519/1000\n",
            "37/37 [==============================] - 0s 9ms/step - loss: 0.3195 - accuracy: 0.8865 - val_loss: 0.4827 - val_accuracy: 0.8224\n",
            "Epoch 520/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.3191 - accuracy: 0.8861 - val_loss: 0.4829 - val_accuracy: 0.8207\n",
            "Epoch 521/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.3185 - accuracy: 0.8874 - val_loss: 0.4826 - val_accuracy: 0.8207\n",
            "Epoch 522/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.3183 - accuracy: 0.8852 - val_loss: 0.4826 - val_accuracy: 0.8190\n",
            "Epoch 523/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.3182 - accuracy: 0.8857 - val_loss: 0.4825 - val_accuracy: 0.8190\n",
            "Epoch 524/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 0.3177 - accuracy: 0.8861 - val_loss: 0.4825 - val_accuracy: 0.8207\n",
            "Epoch 525/1000\n",
            "37/37 [==============================] - 0s 7ms/step - loss: 0.3167 - accuracy: 0.8874 - val_loss: 0.4822 - val_accuracy: 0.8207\n",
            "Epoch 526/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.3169 - accuracy: 0.8878 - val_loss: 0.4824 - val_accuracy: 0.8207\n",
            "Epoch 527/1000\n",
            "37/37 [==============================] - 0s 8ms/step - loss: 0.3165 - accuracy: 0.8878 - val_loss: 0.4827 - val_accuracy: 0.8207\n",
            "Epoch 528/1000\n",
            "37/37 [==============================] - 0s 5ms/step - loss: 0.3167 - accuracy: 0.8870 - val_loss: 0.4830 - val_accuracy: 0.8224\n",
            "Epoch 529/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3156 - accuracy: 0.8874 - val_loss: 0.4824 - val_accuracy: 0.8207\n",
            "Epoch 530/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3150 - accuracy: 0.8887 - val_loss: 0.4825 - val_accuracy: 0.8190\n",
            "Epoch 531/1000\n",
            "37/37 [==============================] - 0s 4ms/step - loss: 0.3146 - accuracy: 0.8878 - val_loss: 0.4829 - val_accuracy: 0.8207\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluasi model\n",
        "loss, accuracy = model.evaluate(X_test, y_test)\n",
        "print(\"Accuracy:\", accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lwQnrZ-N8Gve",
        "outputId": "de2c7354-84b6-4808-f289-196a96ff5c0e"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "19/19 [==============================] - 0s 3ms/step - loss: 0.4822 - accuracy: 0.8190\n",
            "Accuracy: 0.818965494632721\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Plot kurva loss pelatihan dan validasi\n",
        "plt.plot(history.history['loss'], label='train')\n",
        "plt.plot(history.history['val_loss'], label='val')\n",
        "plt.title('Model Loss')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "ct2L3Mtr8KRJ",
        "outputId": "9166ee93-3d02-4577-b392-0d4001569639"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menyimpan akurasi dan val_akurasi\n",
        "accuracy = history.history['accuracy']\n",
        "val_accuracy = history.history['val_accuracy']\n",
        "\n",
        "# Menggambar kurva akurasi\n",
        "plt.plot(accuracy, label='Training Accuracy')\n",
        "plt.plot(val_accuracy, label='Validation Accuracy')\n",
        "plt.title('Training and Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "zKipeC0F8RvH",
        "outputId": "bb0443cb-8c8f-4659-9e8d-813e6cd89580"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZsXeWEzA8W_v",
        "outputId": "e5b00990-1bd9-4c27-849d-444a1a5c0461"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense (Dense)               (None, 64)                768       \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 32)                2080      \n",
            "                                                                 \n",
            " dense_2 (Dense)             (None, 10)                330       \n",
            "                                                                 \n",
            " dense_3 (Dense)             (None, 6)                 66        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 3244 (12.67 KB)\n",
            "Trainable params: 3244 (12.67 KB)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.utils import plot_model\n",
        "\n",
        "file_name = 'arsitektur_model.png'\n",
        "# Menyimpan representasi grafis arsitektur model ke dalam file PNG\n",
        "plot_model(model, to_file=file_name, show_shapes=True, show_layer_names=True)\n",
        "plt.figure(figsize=(8,8))  # Ubah ukuran gambar jika perlu\n",
        "img = plt.imread(file_name)\n",
        "plt.imshow(img)\n",
        "plt.title('Arsitektur Model', fontsize=18)  # Ubah judul sesuai kebutuhan\n",
        "plt.axis('off')  # Hilangkan sumbu\n",
        "plt.savefig(file_name)  # Simpan gambar dengan judul\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 680
        },
        "id": "FkqYxAHb8aXz",
        "outputId": "24835211-6143-4e22-b37c-9d7c540424fb"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        "\n",
        "# Prediksi kelas dari data pengujian\n",
        "y_pred = model.predict(X_test)\n",
        "y_pred_classes = np.argmax(y_pred, axis=1)\n",
        "\n",
        "# Get unique class values from the 'quality' column\n",
        "class_values = df['quality'].unique()\n",
        "\n",
        "# Definisikan nama target (kelas) dan konversi ke string\n",
        "target_names = [str(class_value) for class_value in class_values]\n",
        "\n",
        "# Konversi one-hot encoding menjadi kelas asli\n",
        "y_test_classes = np.argmax(y_test, axis=1)\n",
        "\n",
        "# Classification report\n",
        "report = classification_report(y_test_classes, y_pred_classes,target_names=target_names)\n",
        "print(report)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YF4k8dNt8gha",
        "outputId": "2e32ed7b-6995-473d-859c-d46dc668fdd9"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "19/19 [==============================] - 0s 3ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           5       0.97      1.00      0.98        97\n",
            "           6       0.88      0.97      0.92        97\n",
            "           7       0.71      0.53      0.60        97\n",
            "           4       0.61      0.56      0.58        97\n",
            "           8       0.75      0.86      0.80        96\n",
            "           3       0.95      1.00      0.97        96\n",
            "\n",
            "    accuracy                           0.82       580\n",
            "   macro avg       0.81      0.82      0.81       580\n",
            "weighted avg       0.81      0.82      0.81       580\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "# Prediksi kelas dari data pengujian\n",
        "y_pred = model.predict(X_test)\n",
        "y_pred_classes = np.argmax(y_pred, axis=1)\n",
        "\n",
        "# Konversi one-hot encoding menjadi kelas asli\n",
        "y_test_classes = np.argmax(y_test, axis=1)\n",
        "\n",
        "# Confusion matrix\n",
        "cm = confusion_matrix(y_test_classes, y_pred_classes)\n",
        "\n",
        "# Plot confusion matrix\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=target_names, yticklabels=target_names)\n",
        "plt.xlabel('Predicted labels')\n",
        "plt.ylabel('True labels')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 735
        },
        "id": "sGLk6hDt8mwD",
        "outputId": "ec204fef-5d58-476c-f9f9-74cc1dd44c1c"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "19/19 [==============================] - 0s 2ms/step\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Simpan model ke dalam file\n",
        "model.save(\"model_anggur.h5\")\n",
        "\n",
        "from keras.models import load_model\n",
        "\n",
        "# Muat model dari file\n",
        "model = load_model(\"model_anggur.h5\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8o2PzvoY8t0z",
        "outputId": "bc24ea6a-ed68-49e3-fd31-af2a0a739ae5"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3103: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n",
            "  saving_api.save_model(\n"
          ]
        }
      ]
    }
  ]
}